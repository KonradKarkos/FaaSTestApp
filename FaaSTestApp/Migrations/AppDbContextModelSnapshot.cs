// <auto-generated />
using System;
using FaaSTestApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FaaSTestApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FaaSTestApp.Data.Entities.TestRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HttpResponseCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("RespondedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("ResponseTimeInMs")
                        .HasColumnType("float");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("TestResultId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TestResultId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("FaaSTestApp.Data.Entities.TestResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AverageResponseTimeInMs")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Endpoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HttpMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TestSessionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("WasSuccessful")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("TestSessionId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("FaaSTestApp.Data.Entities.TestSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WasColdStartTested")
                        .HasColumnType("bit");

                    b.Property<bool>("WasSynchronous")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("FaaSTestApp.Data.Entities.TestRequest", b =>
                {
                    b.HasOne("FaaSTestApp.Data.Entities.TestResult", "TestResult")
                        .WithMany("Requests")
                        .HasForeignKey("TestResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("FaaSTestApp.Data.Entities.TestResult", b =>
                {
                    b.HasOne("FaaSTestApp.Data.Entities.TestSession", "TestSession")
                        .WithMany()
                        .HasForeignKey("TestSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestSession");
                });

            modelBuilder.Entity("FaaSTestApp.Data.Entities.TestResult", b =>
                {
                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
